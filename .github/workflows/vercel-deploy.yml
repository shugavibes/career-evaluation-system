name: Deploy to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Verify Vercel credentials
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "Error: VERCEL_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ env.VERCEL_ORG_ID }}" ]; then
            echo "Error: VERCEL_ORG_ID is not set"
            exit 1
          fi
          if [ -z "${{ env.VERCEL_PROJECT_ID }}" ]; then
            echo "Error: VERCEL_PROJECT_ID is not set"
            exit 1
          fi

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ..

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set up Vercel environment variables
        run: |
          vercel env add SUPABASE_URL production ${{ secrets.SUPABASE_URL }} --token=${{ secrets.VERCEL_TOKEN }} --yes || true
          vercel env add SUPABASE_ANON_KEY production ${{ secrets.SUPABASE_ANON_KEY }} --token=${{ secrets.VERCEL_TOKEN }} --yes || true
          vercel env add JWT_SECRET production ${{ secrets.JWT_SECRET }} --token=${{ secrets.VERCEL_TOKEN }} --yes || true
          vercel env add SESSION_SECRET production ${{ secrets.SESSION_SECRET }} --token=${{ secrets.VERCEL_TOKEN }} --yes || true
          vercel env add FRONTEND_URL production ${{ secrets.FRONTEND_URL }} --token=${{ secrets.VERCEL_TOKEN }} --yes || true

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: |
          echo "Building project..."
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          CI: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "Deploying to Vercel..."
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          echo "Deployment URL: ${{ steps.deploy.outputs.deployment_url }}"
          if [ -z "${{ steps.deploy.outputs.deployment_url }}" ]; then
            echo "Error: Deployment URL is empty"
            exit 1
          fi
          # Wait for deployment to be ready
          sleep 45
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.deployment_url }}/api/ping")
          if [ $STATUS_CODE -ne 200 ]; then
            echo "Error: Deployment verification failed with status code $STATUS_CODE"
            exit 1
          fi
          echo "âœ… Deployment verified successfully!" 